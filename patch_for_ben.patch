Index: src/public/app/itemView/controller/CreateItemController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/public/app/itemView/controller/CreateItemController.js	(date 1383249709000)
+++ src/public/app/itemView/controller/CreateItemController.js	(revision )
@@ -13,40 +13,60 @@
         'Savanna.itemView.view.createItem.CreateItem'
     ],
 
-    control:    {
+    control: {
-        commitBtn:  {
+        commitBtn: {
             click: 'onParentItemCommit'
         },
-        cancelBtn:  {
+        cancelBtn: {
             click: 'onParentItemCancel'
         }
     },
 
+    itemStore: null,
+
+    requires: [
+        'Savanna.itemView.store.MainItemStore'
+    ],
+
-    onParentItemCommit:function()   {
+    onParentItemCommit: function () {
 
-        if(this.getView().selectedParentUri)  {
+        this.itemStore = Ext.create('Savanna.itemView.store.MainItemStore');
+
+        this.itemStore.getProxy().url = SavannaConfig.itemCreateUrl;
+        this.itemStore.getProxy().setExtraParam("parentUri", this.getView().selectedParentUri);
+
+        this.itemStore.load({
+            scope: this,
+            callback: this.handleCreateSuccess
+        });
+
+
+    },
+
+    onParentItemCancel: function () {
+        this.getView().close();
+    },
+
+    handleCreateSuccess: function (records, operation, success) {
+
+        console.log(success);
+
-            var itemView = Ext.create('Savanna.itemView.view.ItemViewer', {
+        var itemView = Ext.create('Savanna.itemView.view.ItemViewer', {
-                title: 'Model Item',
-                itemUri: this.getView().selectedParentUri,
+            title: records[0].data.label,
+            itemUri: records[0].data.uri,
+            itemStore: this.itemStore,
-                editMode: true,
+            editMode: true,
-                createMode:true,
-                closable: true,
-                autoScroll: true,
-                tabConfig: {
-                    ui: 'dark'
-                }
-            });
-            Savanna.app.fireEvent('search:itemSelected', itemView);
+            closable: true,
+            autoScroll: true,
+            tabConfig: {
+                ui: 'dark'
+            }
+        });
+        Savanna.app.fireEvent('search:itemSelected', itemView);
-        }   else    {
-            console.log('no uri for parent item');
-        }
 
-
         this.getView().close();
-    },
 
-    onParentItemCancel:function()   {
-        this.getView().close();
     }
+
 });
 
Index: src/public/app/itemView/view/ItemViewer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/public/app/itemView/view/ItemViewer.js	(date 1383249709000)
+++ src/public/app/itemView/view/ItemViewer.js	(revision )
@@ -32,7 +32,7 @@
     config: {
         itemUri: null,
         editMode:false,
-        createMode:false,
+        itemStore:null,
         lockStore:null,
         selectedParentUri: null
     },
Index: src/public/app/itemView/controller/EditHeaderController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/public/app/itemView/controller/EditHeaderController.js	(date 1383249709000)
+++ src/public/app/itemView/controller/EditHeaderController.js	(revision )
@@ -79,8 +79,11 @@
     },
 
     openParentChooser: function() {
-        //ToDo: build and connect the chooser
-        console.log('open a chooser for a parent here');
+
+        Ext.create('Savanna.itemView.view.createItem.CreateItem', {
+            width: 850,
+            height: 500
+        });
     },
 
     onIntendedUsesSelect:function() {
\ No newline at end of file
Index: src/public/app/itemView/controller/ItemViewController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/public/app/itemView/controller/ItemViewController.js	(date 1383249709000)
+++ src/public/app/itemView/controller/ItemViewController.js	(revision )
@@ -38,10 +38,10 @@
             click: 'onEditDelete'
         },
         /* commented out for demo
-        workflowButton: {
-            click: 'onWorkflowSelect'
-        },
-        */
+         workflowButton: {
+         click: 'onWorkflowSelect'
+         },
+         */
         relatedItemsView: {
             'ItemView:OpenItem': 'openItem'
         },
@@ -63,7 +63,13 @@
     },
 
     init: function (app) {
+        if (this.getView().getItemStore()) {
+            this.store = this.getView().getItemStore();
+            this.updateViewWithStoreData(this.store.getAt(0));
+        } else {
-        this.getItemViewData();
+            this.getItemViewData();
+        }
+
         Savanna.app.on('ItemView:SaveEnable', this.onSaveEnable, this);
         return this.callParent(arguments);
     },
@@ -74,22 +80,22 @@
         }
     },
 
-    lockItem:function(uri)  {
+    lockItem: function (uri) {
         this.getView().lockStore.getProxy().url = SavannaConfig.itemLockUrl + uri;
         this.getView().lockStore.load({
             callback: Ext.bind(this.onItemLockCallback, this, [], true)
         });
     },
 
-    unlockItem:function(uri)    {
+    unlockItem: function (uri) {
         this.getView().lockStore.getProxy().url = SavannaConfig.itemLockUrl + uri;
         var record = this.getView().lockStore.getAt(0);
-        if(record)  {
+        if (record) {
             this.getView().lockStore.remove(record);
             this.getView().lockStore.sync({
                 callback: Ext.bind(this.onItemUnlockCallback, this, [], true)
             });
-        }   else    {
+        } else {
             Ext.Error.raise({
                 msg: 'No record found to unlock - lock for edit may have failed.'
             });
@@ -97,7 +103,7 @@
 
     },
 
-    onItemLockCallback:function(records, operation, success)   {
+    onItemLockCallback: function (records, operation, success) {
         if (!success) {
             Ext.Error.raise({
                 msg: 'Locking record failed.'
@@ -105,8 +111,8 @@
         }
     },
 
-    onItemUnlockCallback:function(responseObj)   {
+    onItemUnlockCallback: function (responseObj) {
-        if(!responseObj.operations[0].success)  {
+        if (!responseObj.operations[0].success) {
             Ext.Error.raise({
                 msg: 'Failed to unlock the item.'
             })
@@ -140,9 +146,10 @@
         var tmpStore = Ext.data.StoreManager.lookup(this.store);
         tmpStore.getProxy().url = SavannaConfig.itemDeleteUrl + tmpStore.getAt(0).data.uri;
 
-        if(tmpStore.getProxy().extraParams && tmpStore.getProxy().extraParams.parentUri !== null)  {
+        if (tmpStore.getProxy().extraParams && tmpStore.getProxy().extraParams.parentUri !== null) {
             delete tmpStore.getProxy().extraParams.parentUri;
-        };
+        }
+        ;
 
         tmpStore.addSessionId = false;
 
@@ -236,13 +243,7 @@
     getItemViewData: function () {
         var tmpStore = Ext.data.StoreManager.lookup(this.store);
         tmpStore.getProxy().url = this.buildItemDataFetchUrl(this.getView().itemUri);
-        if (this.getView().getCreateMode()) {
-            tmpStore.getProxy().setExtraParam("parentUri", this.getView().itemUri);
-        }   else    {
-            if(tmpStore.getProxy().extraParams && tmpStore.getProxy().extraParams.parentUri !== null)  {
-                delete tmpStore.getProxy().extraParams.parentUri;
-            };
-        }
+
         tmpStore.load({
             scope: this,
             callback: this.handleRecordDataRequestSuccess
@@ -253,7 +254,7 @@
 
         Savanna.app.fireEvent('itemview:itemDeleted', this.getView());
 
-        if(!responseObj.operations[0].success)  {
+        if (!responseObj.operations[0].success) {
             Ext.Error.raise({
                 msg: 'Failed to delete the item.'
             })
@@ -261,110 +262,112 @@
     },
 
     handleRecordDataRequestSuccess: function (record, operation, success) {
-
         if (success) {
+            this.updateViewWithStoreData(record[0]);
+        } else {
+            /*
+             Server down..?
+             */
+            Ext.Error.raise({
+                msg: 'No record return for item URI.'
+            })
+        }
+    },
+
+    updateViewWithStoreData: function (record) {
-            var me = this;
+        var me = this;
 
-            /*
-             Header View
-             */
-            var headerComponent = me.getView().queryById('itemViewHeaderView');
+        /*
+         Header View
+         */
+        var headerComponent = me.getView().queryById('itemViewHeaderView');
-            headerComponent.setTitle(record[0].data.label);
-            headerComponent.reconfigure(record[0].propertyGroupsStore.getById('Header').valuesStore);
+        headerComponent.setTitle(record.data.label);
+        headerComponent.reconfigure(record.propertyGroupsStore.getById('Header').valuesStore);
 
-            /*
-             Header Edit
-             */
-            //ToDo: do what needs to be done for edit version of header
-            var headerEditComponent = me.getView().queryById('itemViewHeaderEdit');
+        /*
+         Header Edit
+         */
+        //ToDo: do what needs to be done for edit version of header
+        var headerEditComponent = me.getView().queryById('itemViewHeaderEdit');
-            headerEditComponent.queryById('itemNameField').setValue(record[0].data.label);
-            headerEditComponent.store = record[0].propertyGroupsStore.getById('Header').valuesStore;
+        headerEditComponent.queryById('itemNameField').setValue(record.data.label);
+        headerEditComponent.store = record.propertyGroupsStore.getById('Header').valuesStore;
-            headerEditComponent.fireEvent('EditHeader:StoreSet');
+        headerEditComponent.fireEvent('EditHeader:StoreSet');
 
-            /*
-             Related Processes View
-             */
-            var processComponent = me.getView().queryById('relatedProcessesView');
+        /*
+         Related Processes View
+         */
+        var processComponent = me.getView().queryById('relatedProcessesView');
-            processComponent.setTitle('Participated in Process (' + record[0].kvPairGroupsStore.getById('Related Processes').pairsStore.data.length + ')');
-            processComponent.reconfigure(record[0].kvPairGroupsStore.getById('Related Processes').pairsStore);
+        processComponent.setTitle('Participated in Process (' + record.kvPairGroupsStore.getById('Related Processes').pairsStore.data.length + ')');
+        processComponent.reconfigure(record.kvPairGroupsStore.getById('Related Processes').pairsStore);
 
-            /*
-             Related Processes Edit
-             */
-            var processEditComponent = me.getView().queryById('relatedProcessesViewEdit');
+        /*
+         Related Processes Edit
+         */
+        var processEditComponent = me.getView().queryById('relatedProcessesViewEdit');
-            processEditComponent.setTitle('Participated in Process (' + record[0].kvPairGroupsStore.getById('Related Processes').pairsStore.data.length + ')');
-            processEditComponent.reconfigure(record[0].kvPairGroupsStore.getById('Related Processes').pairsStore);
+        processEditComponent.setTitle('Participated in Process (' + record.kvPairGroupsStore.getById('Related Processes').pairsStore.data.length + ')');
+        processEditComponent.reconfigure(record.kvPairGroupsStore.getById('Related Processes').pairsStore);
 
-            /*
-             Related Items View
-             */
-            var relatedItemView = me.getView().queryById('relatedItemsView');
+        /*
+         Related Items View
+         */
+        var relatedItemView = me.getView().queryById('relatedItemsView');
-            relatedItemView.fireEvent('ViewRelatedItems:SetupData', record[0].propertyGroupsStore.getById('Related Items').valuesStore.data.items);
+        relatedItemView.fireEvent('ViewRelatedItems:SetupData', record.propertyGroupsStore.getById('Related Items').valuesStore.data.items);
 
-            /*
-             Related Items Edit
-             */
-            var relatedItemViewEdit = me.getView().queryById('relatedItemsEdit');
+        /*
+         Related Items Edit
+         */
+        var relatedItemViewEdit = me.getView().queryById('relatedItemsEdit');
-            relatedItemViewEdit.store = record[0].propertyGroupsStore.getById('Related Items').valuesStore;
-            relatedItemViewEdit.fireEvent('EditRelatedItems:SetupData', record[0].propertyGroupsStore.getById('Related Items').valuesStore.data.items);
+        relatedItemViewEdit.store = record.propertyGroupsStore.getById('Related Items').valuesStore;
+        relatedItemViewEdit.fireEvent('EditRelatedItems:SetupData', record.propertyGroupsStore.getById('Related Items').valuesStore.data.items);
 
-            /*
-             Qualities View
-             */
-            var qualitiesComponent = me.getView().queryById('itemViewPropertiesView');
+        /*
+         Qualities View
+         */
+        var qualitiesComponent = me.getView().queryById('itemViewPropertiesView');
-            qualitiesComponent.setTitle('Qualities (' + record[0].propertyGroupsStore.getById('Properties').valuesStore.data.length + ')');
-            qualitiesComponent.reconfigure(record[0].propertyGroupsStore.getById('Properties').valuesStore);
+        qualitiesComponent.setTitle('Qualities (' + record.propertyGroupsStore.getById('Properties').valuesStore.data.length + ')');
+        qualitiesComponent.reconfigure(record.propertyGroupsStore.getById('Properties').valuesStore);
 
-            /*
-             Qualities Edit
-             */
-            var qualitiesEditComponent = me.getView().queryById('itemViewPropertiesEdit');
+        /*
+         Qualities Edit
+         */
+        var qualitiesEditComponent = me.getView().queryById('itemViewPropertiesEdit');
-            qualitiesEditComponent.setTitle('Qualities (' + record[0].propertyGroupsStore.getById('Properties').valuesStore.data.length + ')');
-            qualitiesEditComponent.store = record[0].propertyGroupsStore.getById('Properties').valuesStore;
+        qualitiesEditComponent.setTitle('Qualities (' + record.propertyGroupsStore.getById('Properties').valuesStore.data.length + ')');
+        qualitiesEditComponent.store = record.propertyGroupsStore.getById('Properties').valuesStore;
-            qualitiesEditComponent.fireEvent('EditQualities:StoreSet');
+        qualitiesEditComponent.fireEvent('EditQualities:StoreSet');
 
-            /*
-             Annotation Properties View
-             */
-            var annotationViewComponent = me.getView().queryById('annotationPropertiesView');
+        /*
+         Annotation Properties View
+         */
+        var annotationViewComponent = me.getView().queryById('annotationPropertiesView');
-            annotationViewComponent.setTitle('Additional Properties (' + record[0].propertyGroupsStore.getById('Annotations').valuesStore.data.length + ')');
-            annotationViewComponent.reconfigure(record[0].propertyGroupsStore.getById('Annotations').valuesStore);
+        annotationViewComponent.setTitle('Additional Properties (' + record.propertyGroupsStore.getById('Annotations').valuesStore.data.length + ')');
+        annotationViewComponent.reconfigure(record.propertyGroupsStore.getById('Annotations').valuesStore);
 
-            /*
-             Annotation Properties Edit
-             */
-            var annotationEditComponent = me.getView().queryById('annotationPropertiesEdit');
+        /*
+         Annotation Properties Edit
+         */
+        var annotationEditComponent = me.getView().queryById('annotationPropertiesEdit');
-            annotationEditComponent.setTitle('Additional Properties (' + record[0].propertyGroupsStore.getById('Annotations').valuesStore.data.length + ')');
-            annotationEditComponent.reconfigure(record[0].propertyGroupsStore.getById('Annotations').valuesStore);
+        annotationEditComponent.setTitle('Additional Properties (' + record.propertyGroupsStore.getById('Annotations').valuesStore.data.length + ')');
+        annotationEditComponent.reconfigure(record.propertyGroupsStore.getById('Annotations').valuesStore);
 
-            /*
-             Images View/Edit
-             */
-            var imagesBrowserComponent = me.getView().queryById('itemViewImagesGrid'),
-                imagesBrowserComponentEdit = me.getView().queryById('itemViewImagesEdit');            
-            
+        /*
+         Images View/Edit
+         */
+        var imagesBrowserComponent = me.getView().queryById('itemViewImagesGrid'),
+            imagesBrowserComponentEdit = me.getView().queryById('itemViewImagesEdit');
+
-            imagesBrowserComponentEdit.store = record[0].propertyGroupsStore.getById('Images').valuesStore;
+        imagesBrowserComponentEdit.store = record.propertyGroupsStore.getById('Images').valuesStore;
-            
+
-            imagesBrowserComponent.fireEvent('ViewImagesGrid:Setup', record[0].propertyGroupsStore.getById('Images').valuesStore.getById('Images').valuesStore.data.items);
-            imagesBrowserComponentEdit.fireEvent('EditImagesGrid:Setup', record[0].propertyGroupsStore.getById('Images').valuesStore.getById('Images').valuesStore.data.items);
+        imagesBrowserComponent.fireEvent('ViewImagesGrid:Setup', record.propertyGroupsStore.getById('Images').valuesStore.getById('Images').valuesStore.data.items);
+        imagesBrowserComponentEdit.fireEvent('EditImagesGrid:Setup', record.propertyGroupsStore.getById('Images').valuesStore.getById('Images').valuesStore.data.items);
 
-            /*
-             are we creating a new item?
-             */
+        /*
+         are we creating a new item?
+         */
 
-            if (me.getView().getEditMode()) {
-                me.getView().getLayout().setActiveItem(1);
+        if (me.getView().getEditMode()) {
+            me.getView().getLayout().setActiveItem(1);
-                me.lockItem(record[0].data.uri);
+            me.lockItem(record.data.uri);
-            }
+        }
-
-        } else {
-            /*
-             Server down..?
-             */
-            Ext.Error.raise({
-                msg: 'No record return for item URI.'
-            })
-        }
     },
 
     onNewItemClick: function (btn) {
@@ -373,12 +376,12 @@
 
     /* commented out for demo
 
-    onWorkflowSelect: function () {
-        Ext.create('Savanna.itemView.view.workflow.WorkflowSelect', {
-            width: 500,
-            height: 425
-        });
-    },
+     onWorkflowSelect: function () {
+     Ext.create('Savanna.itemView.view.workflow.WorkflowSelect', {
+     width: 500,
+     height: 425
+     });
+     },
      */
 
     onSearchSelect: function () {
@@ -387,11 +390,9 @@
 
     buildItemDataFetchUrl: function (uri) {
         uri = encodeURI(uri);
-        if (!this.getView().getCreateMode()) {
+
-            return SavannaConfig.itemViewUrl + uri;
+        return SavannaConfig.itemViewUrl + uri;
-        } else {
-            return SavannaConfig.itemCreateUrl;
-        }
+
     },
 
     openItem: function (itemName, itemUri) {
